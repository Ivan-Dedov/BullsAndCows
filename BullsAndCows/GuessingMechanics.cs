using System;

namespace BullsAndCows
{
    partial class Program
    {

        /// <summary>
        /// Initiates the guessing stage of the game.
        /// </summary>
        /// <param name="targetNumber">The target number to be guessed.</param>
        /// <param name="targetNumberString">The string representation of the number.</param>
        private static void Guess(int[] targetNumber, string targetNumberString)
        {

            int numberOfBulls;
            int numberOfCows;
            bool hasGivenUp = false;
            int[] userGuess = new int[targetNumber.Length];

            // Do-while loop runs until the user has correctly guessed the number (or given up).
            do
            {
                Console.Write($"[>] Input your guess for a {targetNumber.Length}-digit number, or type {GIVE_UP_STRING} to give up: ");

                string userInput = GetUserInput(targetNumber.Length, ref hasGivenUp);

                if (!hasGivenUp)
                {
                    for (int i = 0; i < userInput.Length; i++)
                    {
                        userGuess[i] = GetNumberFromString(userInput[i]);
                    }

                    // Getting the result of the user's guess: a tuple of integers - number of bulls and cows
                    // (see tuple/кортеж in C# Documentation)
                    (numberOfBulls, numberOfCows) = CheckForBullsAndCows(targetNumber, userGuess);

                    if (!NumberGuessed(numberOfBulls, targetNumber.Length))
                    {
                        Console.WriteLine(Environment.NewLine + $"{userInput}:");
                        Console.WriteLine($"{numberOfBulls} bulls / {numberOfCows} cows" + Environment.NewLine);
                    }
                    else
                    {
                        Console.WriteLine(Environment.NewLine + $"[*] YOU HAVE GUESSED THE NUMBER!");
                        Console.WriteLine($"[*] It was: {targetNumberString}. Well done! *claps*");
                    }
                }
                else
                {
                    // If the user decided to give up, show them the answer and break out of the loop.
                    Console.WriteLine(Environment.NewLine + "[*] You gave up :(");
                    Console.WriteLine($"[*] The number was: {targetNumberString}.");
                    Console.WriteLine("[*] But don't worry! It was a hard one to guess.");
                    break;
                }

            } while (!NumberGuessed(numberOfBulls, targetNumber.Length));

        }


        /// <summary>
        /// Checks how many bulls and cows were in the user's guess.
        /// </summary>
        /// <param name="targetNumber">The number to be guessed (as an array).</param>
        /// <param name="userGuess">User's guess (as an array).</param>
        /// <returns>A tuple of integers: first - number of bulls; second - number of cows.</returns>
        private static (int, int) CheckForBullsAndCows(int[] targetNumber, int[] userGuess)
        {

            int numberOfBulls = 0;
            int numberOfCows = 0;

            for (int i = 0; i < targetNumber.Length; i++)
            {
                // If a number is correct AND in the right spot.
                if (userGuess[i] == targetNumber[i])
                {
                    numberOfBulls++;
                }
                else
                {
                    // Checking if the current digit is a cow.
                    for (int j = 0; j < targetNumber.Length; j++)
                    {
                        // Cow = correct number BUT NOT in the right spot, therefore: i != j.
                        if ((userGuess[i] == targetNumber[j]) && (i != j))
                        {
                            numberOfCows++;
                        }
                    }
                }
            }

            return (numberOfBulls, numberOfCows);

        }


        /// <summary>
        /// Checks if the input number matches the one generated by the computer.
        /// </summary>
        /// <param name="numberOfBulls">Number of bulls in the guess.</param>
        /// <param name="targetNumberLength">Number of digits in the generated number.</param>
        /// <returns>true, if the number has been guessed correctly; false, otherwise.</returns>
        private static bool NumberGuessed(int numberOfBulls, int targetNumberLength)
        {
            return (numberOfBulls == targetNumberLength);
        }

    }
}